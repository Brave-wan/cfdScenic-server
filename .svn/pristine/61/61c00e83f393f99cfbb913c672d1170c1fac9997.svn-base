package com.htkj.cfdScenic.app.controller;

import com.htkj.cfdScenic.app.model.RestaurantOrder;
import com.htkj.cfdScenic.app.model.UserAccount;
import com.htkj.cfdScenic.app.model.UserAccountLog;
import com.htkj.cfdScenic.app.service.RestaurantOrderService;
import com.htkj.cfdScenic.app.service.UserAccountLogService;
import com.htkj.cfdScenic.app.service.UserAccountService;
import com.htrj.common.base.BaseController;
import com.htrj.common.page.DataGrid;
import com.htrj.common.page.Json;
import com.htrj.common.page.PagerForm;
import com.htrj.common.utils.GenerateSequenceUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

/**
 * @author wangfenglong
 * @date 2016/10/8 00089:09.
 */
@Controller
@RequestMapping("/background/restaurantOrderManage")
public class RestaurantOrderManageController extends BaseController{

    @Autowired
    private RestaurantOrderService restaurantOrderService;
    @Autowired
    private UserAccountService userAccountService;
    @Autowired
    private UserAccountLogService userAccountLogService;

    /**
     * 酒店订单 - 主页
     * @return
     */
    @RequestMapping("/toRestaurantOrderManage")
    public String toRestaurantOrderManage(){
        return "/background/restaurantOrder/Manager";
    }

    /**
     * 酒店订单 - 列表
     * @param page
     * @param restaurantOrder
     * @return
     */
    @RequestMapping("/getRestaurantOrderList")
    @ResponseBody
    public DataGrid getRestaurantOrderList(PagerForm page , RestaurantOrder restaurantOrder , String nickName){
        Map<String,Object> map = new HashMap();
        map.put("orderCode",restaurantOrder.getOrderCode());
        map.put("createTime",restaurantOrder.getCreateTime());
        map.put("orderState",restaurantOrder.getOrderState());
        map.put("nickName",nickName);
        return restaurantOrderService.getRestaurantOrderList(page.getPageRequest(map));
    }


    /**
     * 订单 - 详情
     * @param id
     * @param model
     * @return
     */
    @RequestMapping("/showPage")
    public String showPage(Long id , ModelMap model){
        try {
            Map<String, Object> map = restaurantOrderService.selectByPrimaryKey(id);
            model.addAttribute("model", map);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "/background/restaurantOrder/ShowPage";
    }


    /**
     * 订单 - 删除
     * @param id
     * @return
     */
    @RequestMapping("/deleteRestaurantOrder")
    @ResponseBody
    public Json deleteVisitorsOrder(Long id){
        Json json = new Json();
        try {
            restaurantOrderService.deleteVisitorsOrder(id);
            json.setSuccess(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return json;
    }


    /**
     * 修改订单状态
     * @param restaurantOrder
     * @return
     */
    @RequestMapping("/updateRestaurantOrder")
    @ResponseBody
    public Json updateRestaurantOrder(RestaurantOrder restaurantOrder){
        Json json = new Json();
        UserAccountLog userAccountLog = new UserAccountLog();
        try {
            if (restaurantOrder.getOrderState() == 6) {
                UserAccount userAccount = userAccountService.selectByUserId(restaurantOrder.getUserId());
                BigDecimal b1 = new BigDecimal(userAccount.getBalance());
                BigDecimal b2 = new BigDecimal(restaurantOrder.getRealPrice());
                userAccount.setUserId(restaurantOrder.getUserId());
                userAccount.setBalance((b1.add(b2)).doubleValue());
                userAccountService.addBalanceByUserId(userAccount);

                userAccountLog.setId(GenerateSequenceUtil.getUniqueId());
                userAccountLog.setType(4);
                userAccountLog.setTradeIntegration(0);
                userAccountLog.setIntegration(0);
                userAccountLog.setPrice(restaurantOrder.getRealPrice());
                userAccountLog.setBalance((b1.add(b2)).doubleValue());
                userAccountLog.setUserId(restaurantOrder.getUserId());
                userAccountLogService.insertMessage(userAccountLog);
            }

            restaurantOrderService.updateByOrderCode(restaurantOrder);
            json.setSuccess(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return json;
    }

}
