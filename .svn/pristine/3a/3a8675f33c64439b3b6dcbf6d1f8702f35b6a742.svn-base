<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.htkj.cfdScenic.app.dao.GoodsOrderDao">

	<insert id="saveGoodsOrder" parameterType="com.htkj.cfdScenic.app.model.GoodsOrder">
		insert into goods_order(
				id,
				name,
				order_describe,
				price,
				deliver_date,
				quantity,
				pay_way,
				pay_state,
				order_state,
				create_time,
				user_id,
				real_price,
				order_code,
				is_comment,
				goods_id,
				shop_information_id,
				address_id,
				deliver_fee,
				is_pickup				
		)values(
				#{id},
				#{name},
				#{orderDescribe},
				#{price},
				#{deliverDate},
				#{quantity},
				#{payWay},
				#{payState},
				#{orderState},
				#{createTime},
				#{userId},
				#{realPrice},
				#{orderCode},
				#{isComment},
				#{goodsId},
				#{shopInformationId},
				#{addressId},
				#{deliverFee},
				#{isPickup}
		)
	</insert>
	
	<select id="findGoodsOrderById" parameterType="string" resultType="map">
		select name,price,quantity,real_price from goods_order where id in(${ids})
	</select>
	<update id="updateGoodsOrder" parameterType="map">
		update goods_order set order_state = 3 AND pay_way = #{payWay} AND pay_time = #{payTime} AND pay_state = 1 where id = #{id} 
	</update>	
	<update id="updateUndoGoodsOrder" parameterType="long">
		update goods_order set order_state = 2 where id = #{id} 
	</update>	
	<select id="findGoodsOrder" parameterType="map" resultType="map">
		SELECT
			si.name as shopName,
			go.id,
			go.name,
			go.order_describe,
			go.price,
			go.quantity,
			go.order_state,
			go.pay_state,
			go.order_code,
			sg.describe_img
		FROM
			goods_order go JOIN shop_information si on si.id = go.shop_information_id JOIN shop_goods sg ON go.goods_id = sg.id
		WHERE
			user_id = #{userId,jdbcType=NUMERIC} AND pay_state in (${payState}) AND order_state in (${orderState}) limit #{page},#{rows}
	</select>
	
	<select id="findGoodsOrderDetail" parameterType="long" resultType="map">
		SELECT
			si.id as informationId,
			si.name as informationName,
			go.id as goodsId,
			go.order_describe,
			go.price,
			go.quantity,
			go.pay_way,
			go.pay_state,
			go.order_state,
			DATE_FORMAT(go.create_time,'%Y-%m-%d %h:%i:%s') AS create_time,
			DATE_FORMAT(go.pay_time,'%Y-%m-%d %h:%i:%s') AS pay_time,
			DATE_FORMAT(go.refund_time,'%Y-%m-%d %h:%i:%s') AS refund_time,
			go.user_id,
			go.real_price,
			go.order_code,
			go.is_comment,
			go.address_id,
			go.deliver_fee,
			go.is_pickup,
			ua.user_name,
			ua.place_address,
			ua.detail_address
		FROM
			goods_order go JOIN shop_information si ON go.shop_information_id = si.id JOIN user_address ua ON go.address_id = ua.id
		WHERE
			go.id=#{orderId}
	</select>
	<update id="goodsBackMoney" parameterType="map">
		UPDATE goods_order SET order_state = #{orderState} WHERE id = #{id}
	</update>
</mapper>