package com.htkj.cfdScenic.app.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.CommentSum;
import com.htkj.cfdScenic.app.service.ConsumerUserService;
import com.htkj.cfdScenic.app.service.PlayCircleService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.page.DataGrid;
import com.htrj.common.page.PagerForm;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("interFace/PlayCircle")
public class PlayCircleController extends BaseController{
	
	@Autowired
	private PlayCircleService playCircleService;
	@Autowired
	private ConsumerUserService consumerUserService;
	
	/**
	 * 游乐圈 - 精彩游记 - 分页查询
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/getTraveLogs
	 * 参数
	 * 	page页数 rows条数
	 * 流程：
	 * 1，按照时间倒序分页查询出所有的游记
	 * 2，for循环查处对应游记的赞数，评论，分享数
	 * 
	 * 调用表
	 * travelogs
	 */
	@RequestMapping(value = "/getTraveLogs", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getTraveLogs(PagerForm pagerForm) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					Map map = new HashMap();
					DataGrid dataGrid = playCircleService.getTraveLogs(pagerForm.getPageRequest(map));
					List<Map<String,Object>> list = dataGrid.getRows();
					for(int i=0;i<list.size();i++){
						int favorCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),1);
						int commentCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),2);
						int shareCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),3);
						list.get(i).put("favorCount", favorCount);
						list.get(i).put("commentCount", commentCount);
						list.get(i).put("shareCount", shareCount);
					}
					dataGrid.setRows(list);
					msg.setData(dataGrid);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	/**
	 * 游乐圈 - 获取轮播图
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/getImg
	 * 流程
	 * 查询轮播图数据
	 * 调用表
	 * advertisement
	 */
	@RequestMapping(value = "/getImg", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getImg() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					List list = playCircleService.getImg();
					msg.setData(list);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 游乐圈 - 景区活动 (活动和结伴游活动公用)
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/getActivity?page=1&rows=2&isTeam=0
	 * 流程
	 * 获取分页景区数据
	 * 调用表
	 * visitors
	 */
	@RequestMapping(value = "/getActivity", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getActivity(PagerForm PagerForm,Integer isTeam) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					Map map = new HashMap();
					map.put("isTeam", isTeam);
					DataGrid list = playCircleService.getActivity(PagerForm.getPageRequest(map));
					msg.setData(list);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 游乐圈 - 景区活动详情
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/getActivityDetail?id=1
	 * 流程
	 * 1,获取分页景区数据
	 * 2,获取这个活动的订单
	 * 
	 * 调用表
	 * visitors
	 */
	@RequestMapping(value = "/getActivityDetail", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getActivityDetail(Long id) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					Map map = playCircleService.getActivityDetail(id);
					Map para = new HashMap();
					para.put("id",map.get("id"));
					para.put("start_valid",map.get("start_valid"));
					para.put("end_valid",map.get("end_valid"));
					int personCount = playCircleService.getPersonCount(para);
					map.put("personNumber", personCount);
					msg.setData(map);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 游乐圈 - 分享
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/saveShare?linkId=1
	 * 流程
	 * 1,插入一条分享数据
	 * 调用表
	 * 
	 */
	@RequestMapping(value = "/saveShare", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String saveShare(CommentSum commentSum) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					commentSum.setId(GenerateSequenceUtil.getUniqueId());
					commentSum.setFavor(0);
					commentSum.setComment(0);
					commentSum.setShare(1);
					commentSum.setUserId(userId);
					commentSum.setCreateDate((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date()));
					playCircleService.saveShare(commentSum);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 游乐圈 - 精彩游记
	 * http://localhost:8080/cfdScenic/interFace/PlayCircle/getWonderful?page=1&rows=2&type=0
	 * 参数 type（类型（0视频攻略1精彩游记2必去清单））
	 */
	@RequestMapping(value = "/getWonderful", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getWonderful(PagerForm pagerForm,Integer type) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					Map map = new HashMap();
					map.put("type",type);
					DataGrid dataGrid = playCircleService.getWonderful(pagerForm.getPageRequest(map));
					List<Map<String,Object>> list = dataGrid.getRows();
					for(int i=0;i<list.size();i++){
						int favorCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),1);
						int commentCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),2);
						int shareCount = playCircleService.getTraveLogsCount(String.valueOf(list.get(i).get("id")),3);
						list.get(i).put("favorCount", favorCount);
						list.get(i).put("commentCount", commentCount);
						list.get(i).put("shareCount", shareCount);
					}
					dataGrid.setRows(list);
					msg.setData(dataGrid);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 根据游记的id获取游记的评论 - 通用
	 */
	@RequestMapping(value = "/getCommentById", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getCommentById(PagerForm pagerForm,Long id) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = new HashMap();
					map.put("id", id);
					DataGrid dataGrid = playCircleService.getCommentById(pagerForm.getPageRequest(map));
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
}
