package com.htkj.cfdScenic.app.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.HotelOrder;
import com.htkj.cfdScenic.app.model.RestaurantOrder;
import com.htkj.cfdScenic.app.model.ShopUser;
import com.htkj.cfdScenic.app.model.UserAccount;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.HotelOrderService;
import com.htkj.cfdScenic.app.service.RestaurantOrderService;
import com.htkj.cfdScenic.app.service.ShopUserService;
import com.htkj.cfdScenic.app.service.UserAccountService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.page.DataGrid;
import com.htrj.common.page.PagerForm;

@Controller
@RequestMapping("/restaurantOrder")
public class RestaurantOrderController extends BaseController{
	@Autowired
	private RestaurantOrderService restaurantOrderService;
	@Autowired
	private ShopInformationService consumerUserService;
	@Autowired
	UserAccountService userAccountService;
	@Autowired
	private ShopUserService shopUserService;
	
	/*
	 * 饭店版--订单中心--订单列表
	 * post
	 * http://localhost:8080/cfdScenic/restaurantOrder/orderList
	 * 用户新增添加收货地址    
	 * 请求参数
		id,				//订单id
		name,			//订单名称
		quantity,		//房间数量
		start_date,		//入住时间
		end_date,		//离店时间
		price,			//原价
		real_price,		//应付价格
		order_code,		//订单号
		check_days		//入住天数
		
		
		
		status			//状态(1未使用2已使用3已过期)
		type			//类型(0单品1套餐)
		
	 * 调用表 hotel_order
	 */
	@RequestMapping(value="orderList",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String orderList(Integer status,PagerForm pagerForm,Integer type){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		//测试数据
		//token = "";
		//userId = 1l;
		if(token!=null){
			if(userId!=null){
				
				ShopUser user=	shopUserService.selectByUserId(userId);
				Long shopInformationId=user.getShopInformationId();
				map.put("sfId", shopInformationId);
				
				switch (status) {
				case 1:
					map.put("status","3");
					break;
				case 2:
					map.put("status","5");
					break;
				case 3:
					map.put("status","6");
					break;
				}
				try {
					map.put("type",type);
					//获取订单列表
					DataGrid data = restaurantOrderService.findOrderList(pagerForm.getPageRequest(map));
					msg.setHearder(0, "success");
					msg.setData(data);
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	
	/*
	 * 饭店版--订单中心--订单搜索
	 * post
	 * http://localhost:8080/cfdScenic/restaurantOrder/selectOrderBycode
	 * 用户新增添加收货地址    
	 * 请求参数
		id,				//订单id
		name,			//订单名称
		quantity,		//房间数量
		start_date,		//入住时间
		end_date,		//离店时间
		price,			//原价
		real_price,		//应付价格
		order_code,		//订单号
		check_days		//入住天数
		
		
		
		status			//状态(1未使用2已使用3已过期)
		type			//类型(0单品1套餐)
		
	 * 调用表 hotel_order
	 */
	@RequestMapping(value="selectOrderBycode",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String selectOrderBycode(String codeOrname){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		//测试数据
		//token = "";
		//userId = 1l;
		if(token!=null){
			if(userId!=null){
				
				ShopUser user=	shopUserService.selectByUserId(userId);
				Long shopInformationId=user.getShopInformationId();
				map.put("sfId", shopInformationId);
				map.put("codeOrname", codeOrname);
				
				try {

					//获取订单列表
					List<Map<String,Object>> data = restaurantOrderService.selectOrderBycode(map);
					msg.setHearder(0, "success");
					if(data.size()>0&&data.get(0)!=null)
					{
						msg.setData(data);
					}
					
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	
	
	/*
	 * 饭店版--订单中心--取消订单
	 * post
	 * http://localhost:8080/cfdScenic/restaurantOrder/cancelOrder
	 * 根据用户提供的订单号取消订单    
	 * 请求参数
		orderCode		//订单号
	 * 调用表 hotel_order
	 */
	@RequestMapping(value="cancelOrder",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String cancelOrder(String orderCode){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		//测试数据
		//token = "";
		//userId = 1l;
		if(token!=null){
			if(userId!=null){
				try {
					//查订单信息
					RestaurantOrder restaurantOrder = restaurantOrderService.findOrder(orderCode);
					//查是否以经支付
					Integer payState = restaurantOrder.getPayState();
					if(payState!=null&&payState==0){
						//更新状态为(取消订单)2
						restaurantOrderService.updateState(orderCode);
					}else{
						//查用户支付钱数
						BigDecimal realPrice = restaurantOrder.getRealPrice();
						//查用户id
						Long userId2 = restaurantOrder.getUserId();
						//查用户的帐户信息
						UserAccount userAccountMessage = userAccountService.findByUserId(userId2);
						//获取用户余额
						BigDecimal balance = userAccountMessage.getBalance();
						//更新用户钱数
						userAccountMessage.setBalance(realPrice.add(balance));
						userAccountService.updateBalanceMessage(userAccountMessage);
						//更新状态为(取消订单)2
						restaurantOrderService.updateState(orderCode);
					}
					msg.setHearder(0, "success");
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	
	/*
	 * 饭店版--订单中心--订单核销
	 * post
	 * http://localhost:8080/cfdScenic/restaurantOrder/orderVerification
	 * 根据用户提供的订单号取消订单    
	 * 请求参数
		orderCode		//订单号
	 * 调用表 hotel_order
	 */
	@RequestMapping(value="orderVerification",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String orderVerification(String orderCode){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		//测试数据
		//token = "";
		//userId = 1l;
		if(token!=null){
			if(userId!=null){
				try {
					//查订单信息
					RestaurantOrder restaurantOrder = restaurantOrderService.findOrder(orderCode);
					restaurantOrder.setOrderState(5);
					restaurantOrderService.updateOrderState(restaurantOrder);
					msg.setHearder(0, "success");
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
}
