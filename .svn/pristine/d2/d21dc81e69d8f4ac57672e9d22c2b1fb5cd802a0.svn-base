package com.htkj.cfdScenic.app.controller;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.ShopInformation;
import com.htkj.cfdScenic.app.model.ShopUser;
import com.htkj.cfdScenic.app.model.SmsSendRecord;
import com.htkj.cfdScenic.app.model.SysVerification;
import com.htkj.cfdScenic.app.model.UserAccount;
import com.htkj.cfdScenic.app.service.MyPurseService;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.ShopUserService;
import com.htkj.cfdScenic.app.service.SmsSendService;
import com.htkj.cfdScenic.app.service.SysVerificationService;
import com.htkj.cfdScenic.app.service.UserAccountService;
import com.htkj.cfdScenic.app.util.MD5;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("/shopUser")
public class ShopUserController extends BaseController {

	// 全局数组
	private final static String[] strDigits = { "0", "1", "2", "3", "4", "5",
			"6", "7", "8", "9" };

	@Autowired
	private ShopUserService shopUserService;
	@Autowired
	private SmsSendService smsSendService;
	@Autowired
	SysVerificationService sysVerificationService;
	@Autowired
	ShopInformationService shopInformationService;
	@Autowired
	MyPurseService myPurseService;

	/*
	 * 登入 post http://localhost:8080/cfdScenic/shopUser/login 返回状态信息 0登入成功 1登入失败
	 * 4用户名错误 5密码错误 返回参数： token userId
	 */
	@RequestMapping(value = "login", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String login(ShopUser shopUser) {
		ResponseMsg msg = new ResponseMsg();
		String telPhone = shopUser.getTelPhone();
		ShopUser userMessage = shopUserService.selectByPhone(telPhone);
		if (userMessage == null) {
			msg.setHearder(4, "用户名错误");
		} else {
			MD5 getMD5 = new MD5();
			String md5userPassword = getMD5.GetMD5Code(shopUser.getPassWord());
			String password = userMessage.getPassWord();
			if (password.equalsIgnoreCase(md5userPassword)) {
				Map<String, String> map = new HashMap<String, String>();
				String uid = UUID.randomUUID().toString();
				map.put("token", uid);
				map.put("userId", userMessage.getId().toString());
				userMessage.setShopToken(uid);
				try {
					shopUserService.updateUUID(userMessage);
					msg.setHearder(0, "登录成功");
					msg.setData(map);
					webContext.setSessionUser(userMessage);
				} catch (Exception e) {
					msg.setHearder(1, "登入失败");
					return JSONObject.toJSONString(msg,
							SerializerFeature.WriteMapNullValue);
				}
			} else {
				msg.setHearder(5, "密码错误");
			}

		}
		return JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
	}

	/*
	 * 注册 post http://localhost:8080/cfdScenic/shopUser/register
	 * 把用户注册的信息存进数据库表里面 请求参数 telPhone;//电话 nickName;//昵称 passWord;//密码
	 * sex;//性别（0男 1女） age;//年龄 realName;//真实姓名 idCard;//身份证 holdCardImg;//手持证件照
	 * faceCardImg;//身份证正面照 backCardImg;//身份证反面照 name;//商家名称 private Long
	 * shopId;//商家类型 （1酒店，2特产 3饭店4，小吃） businessScope;//经营范围 private Long
	 * accountType;//账户类型 （0 对公，1个人） accountName;//账户名称 bankCard;//银行卡号
	 * accountBank;//开户行 private Integer isLicense;//是否有营业执照 licenseImg;//营业执照照片
	 * otherImg1;//其他证件照1 otherImg2;//其他证件照2 0注册成功 1注册失败 4信息不能为空 5账号以经注册 6请发送验证码
	 * 7验证码输入错误，请重新输入
	 */
	@RequestMapping(value = "register", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String register(ShopUser user, String checkcode,
			ShopInformation shopInformation) {
		ResponseMsg msg = new ResponseMsg();
		if (user.getTelPhone() != null & user.getPassWord() != null
				& checkcode != null) // 判断是否为空
		{
			String telPhone = user.getTelPhone();
			ShopUser userMessage = shopUserService.selectByPhone(telPhone);// 判断是否存在
			if (userMessage == null) {
				SysVerification fr = sysVerificationService
						.getMessage(telPhone);
				if (fr != null) {
					if (checkcode.equals(fr.getVerification())) {
						try {
							Long temId = GenerateSequenceUtil.getUniqueId();
							Long temUserId = GenerateSequenceUtil.getUniqueId();

							shopInformation.setId(temId);
							shopInformation.setIsAudit(0);
							shopInformation.setState(0);
							shopInformation.setShopUserId(temUserId);
							shopInformationService
									.insertShopInformation(shopInformation);

							user.setId(temUserId);
							user.setPassWord(MD5.GetMD5Code(user.getPassWord()));
							user.setShopToken(UUID.randomUUID().toString());
							user.setShopInformationId(temId);
							user.setState(0);
							shopUserService.insertMessage(user);

							UserAccount userAccount = new UserAccount();
							userAccount.setBalance(BigDecimal.ZERO);
							userAccount.setId(GenerateSequenceUtil
									.getUniqueId());
							userAccount.setIntegration(0);
							userAccount.setUserId(temId);
							myPurseService.insertUserAccount(userAccount);

							msg.setHearder(0, "注册成功");
						} catch (Exception e) {
							msg.setHearder(1, "注册失败");
						}
					} else {
						msg.setHearder(7, "验证码输入错误，请重新输入");
					}
				} else {
					msg.setHearder(6, "请发送验证码");
				}
			} else {
				msg.setHearder(5, "账号已经注册");
			}
		} else {
			msg.setHearder(4, "信息不能为空");
		}
		return JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
	}

	/*
	 * 获取验证码 post http://localhost:8080/cfdScenic/shopUser/checkCode 请求参数 phone
	 * //电话号码 返回状态 4信息不能为空
	 */
	@RequestMapping(value = "checkCode", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String checkCode(SysVerification sysVerification)
			throws UnsupportedEncodingException {
		ResponseMsg msg = new ResponseMsg();
		StringBuffer str = new StringBuffer();
		for (int i = 0; i < 6; i++) {
			int x = (int) (Math.random() * 10);
			str.append(strDigits[x]);
		}
		String phone = sysVerification.getPhone();
		if (phone != null) {
			SmsSendRecord sms = new SmsSendRecord();
			sms.setMobiles(phone.toString());
			sms.setNeedstatus(false);
			sms.setContent(str.toString());
			Map<String, String> map = smsSendService.SmsSend(sms);
			if (map.get("state").equals("0")) {
				SysVerification message = sysVerificationService
						.getMessage(phone);
				if (message == null) {
					sysVerification.setId(GenerateSequenceUtil.getUniqueId());
					sysVerification.setVerification(str.toString());
					sysVerification.setCreateTime(new Date().toString());
					sysVerification.setPhone(phone);
					sysVerificationService.insertMessage(sysVerification);
				} else {
					message.setVerification(str.toString());
					sysVerificationService.updateMessage(message);
				}
				msg.setHearder(1, map.get("data"));
			} else {
				msg.setHearder(Integer.parseInt(map.get("state")),
						map.get("data"));
			}
		} else {
			msg.setHearder(4, "信息不能为空");
		}

		return JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
	}

	/**
	 * 找回密码 post http://localhost:8080/cfdScenic/shopUser/findPsw 请求参数: mobileNo
	 * 手机号 checkcode 验证码 password 新密码
	 */
	@RequestMapping(value = "findPsw", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String findPsw(ShopUser user, String checkcode) {
		ResponseMsg msg = new ResponseMsg();
		if (user.getTelPhone() != null & user.getPassWord() != null
				& checkcode != null) // 判断是否为空
		{
			String telPhone = user.getTelPhone();
			ShopUser userMessage = shopUserService.selectByPhone(telPhone);// 判断是否存在
			if (userMessage != null) {
				SysVerification fr = sysVerificationService
						.getMessage(telPhone);
				if (fr != null) {
					if (checkcode.equals(fr.getVerification())) {
						try {
							userMessage.setPassWord(MD5.GetMD5Code(user
									.getPassWord()));
							// userMessage.setTelPhone(telPhone);
							shopUserService.update(userMessage);
							msg.setHearder(0, "修改成功");
						} catch (Exception e) {
							msg.setHearder(1, "修改失败");
						}
					} else {
						msg.setHearder(7, "验证码输入错误，请重新输入");
					}
				} else {
					msg.setHearder(6, "请发送验证码");
				}
			} else {
				msg.setHearder(5, "账号不存在");
			}
		} else {
			msg.setHearder(4, "信息不能为空");
		}
		return JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
	}

	/**
	 * 店铺信息-商家认证信息 post http://localhost:8080/cfdScenic/shopUser/shopUserMessage
	 * 根据商户id来查找商户的认证信息 请求参数:
	 * 
	 */
	@RequestMapping(value = "shopUserMessage", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String shopUserMessage() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		String token = webContext.getRequest().getHeader("Authorization");
		if (token != null) {
			Long userId = shopUserService.getShopUserIdByToken(token);
			if (userId != null) {

				Map<String, Object> map = new HashMap<String, Object>();
				try {
					map = shopUserService.shopUserMessage(userId);
					msg.setHearder(0, "success");
					msg.setData(map);
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			} else {
				msg.setHearder(3, "异地登陆");
			}
		} else {
			msg.setHearder(2, "token为空");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		return json;
	}

	/**
	 * 店铺信息-实名认证信息 post
	 * http://localhost:8080/cfdScenic/shopUser/shopAutonymMessage
	 * 根据商户id来查找商户的认证信息 请求参数: id //商户id
	 */
	@RequestMapping(value = "shopAutonymMessage", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String shopAutonymMessage() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();

		String token = webContext.getRequest().getHeader("Authorization");
		if (token != null) {
			Long userId = shopUserService.getShopUserIdByToken(token);
			if (userId != null) {
				Map<String, Object> map = new HashMap<String, Object>();
				try {
					map = shopUserService.shopAutonymMessage(userId);
					msg.setHearder(0, "success");
					msg.setData(map);
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			} else {
				msg.setHearder(3, "异地登陆");
			}
		} else {
			msg.setHearder(2, "token为空");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		return json;
	}

	/**
	 * 店铺信息-店铺信息 post http://localhost:8080/cfdScenic/shopUser/storeMessage
	 * 根据类型来查数据库 请求参数: status //店铺信息 1(饭店)2(酒店)3(商品)
	 */
	@RequestMapping(value = "storeMessage", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String storeMessage(Integer status) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();

		String token = webContext.getRequest().getHeader("Authorization");
		if (token != null) {
			Long userId = shopUserService.getShopUserIdByToken(token);
			if (userId != null) {

				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> content = new HashMap<String, Object>();
				try {
					switch (status) {
					case 1:
						map.put("status", "3");
						map.put("userId", userId);
						break;
					case 2:
						map.put("status", "1");
						map.put("userId", userId);
						break;
					case 3:
						map.put("status", "2,4");
						map.put("userId", userId);
						break;
					}
					content = shopInformationService.storeMessage(map);
					msg.setHearder(0, "success");
					msg.setData(content);
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			} else {
				msg.setHearder(3, "异地登陆");
			}
		} else {
			msg.setHearder(2, "token为空");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		return json;
	}

}
