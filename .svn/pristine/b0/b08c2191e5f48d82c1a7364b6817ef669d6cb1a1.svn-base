package com.htkj.cfdScenic.app.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.UserAccount;
import com.htkj.cfdScenic.app.model.UserAccountLog;
import com.htkj.cfdScenic.app.model.VisitorsOrder;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.UserAccountLogService;
import com.htkj.cfdScenic.app.service.UserAccountService;
import com.htkj.cfdScenic.app.service.VisitorsOrderService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("/visitorsOrder")
public class VisitorsOrderController extends BaseController {
	@Autowired
	private VisitorsOrderService visitorsOrderService;
	@Autowired
	private ShopInformationService consumerUserService;
	@Autowired
	private UserAccountService userAccountService;
	@Autowired
	private UserAccountLogService userAccountLogService;

	/**
	 * 景区-确认订单 
	 * http://localhost/cfdScenic/visitorsOrder/affirmOrder?name=订单名称&orderDescribe=订单描述&price=80&startValid=2016-09-05&endValid=2016-09-09&quantity=3&realPrice=240&visitorsId=1&isMention=1&addressId=
	 * 把景区传过来的值存进表
	 *  name 订单名称 
	 *  orderDescribe 订单描述
	 *   price 原价 
	 *   startValid 开始有效期 
	 *   endValid 结束有效期 
	 *   quantity 数量 
	 * 	  应付价格 realPrice
	 * 	 景区Id visitorsId
	 * 	 是否自提 isMention
	 * 	收货地址Id		addressId
	 */
	@RequestMapping(value = "/affirmOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String affirmOrder(VisitorsOrder visitorsOrder) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Long temCode = GenerateSequenceUtil.getUniqueId();
						visitorsOrder.setId(GenerateSequenceUtil.getUniqueId());
						visitorsOrder.setPayState(0);
						visitorsOrder.setOrderState(1);
						visitorsOrder.setUserId(userId);
						visitorsOrder.setOrderCode(temCode.toString());
						visitorsOrder.setIsComment(0);
						visitorsOrder.setType(0);
						visitorsOrderService.insertMessage(visitorsOrder);
						
						msg.setHearder(0, "success");
						msg.setData(visitorsOrder.getId());
					}

			} else {
				msg.setHearder(2, "token is null");
			}

		} catch (Exception e) {
			msg.setHearder(1, "error");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	/**
	 * Title:景区 - 订单回显
	 * http://localhost:8080/cfdScenic/visitorsOrder/getVisitorsOrderById?id=1
	 * @author:lishilong
	 * @date:2016年9月5日
	 */
	@RequestMapping(value="getVisitorsOrderById",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getVisitorsOrderById(Long id){
		String json = new String();
		ResponseMsg msg = new ResponseMsg();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if(token != null){
				Long userId = consumerUserService.getUserIdByToken(token);
				if(userId != null){
					Map<String,Object> map = visitorsOrderService.getVisitorsOrderById(id);
					if(map != null){
						msg.setData(map);
					}
					msg.setHearder(0, "ok");
				}else{
					msg.setHearder(3,"请重新登录！");
				}
			}else{
				msg.setHearder(2,"token is null");
			}
		} catch (Exception e) {
			msg.setHearder(1,"error");
			e.printStackTrace();
		}
		json = JSONObject.toJSONString(msg);
		return json;
	}	
	
	
	/**
	 * 景区-支付订单  
	 * http://localhost/cfdScenic/visitorsOrder/payOrder?id=1&balance=100&price=10&payType=1
	 * 把景区传过来的值存进表
	 * 
	 * 支付方式是余额的话就减少自身的余额，其他不变，但是得更新表的积分
	 * 
	 * 更新商户表的余额
	 * 
	 * 更新订单的状态
	 * 
	 * visitorsId //景点订单号 payType //支付方式（0余额1支付宝2微信） balance //余额 price //价格
	 */
	@RequestMapping(value = "/payOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String payOrder(Long id,Double balance,Double price,Integer payType) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("orderId", id);
					if (payType == 0) {
						if (balance.compareTo(price) == 1) {
							//卖家-钱
							UserAccount userAccountMessage = new UserAccount();
							userAccountMessage.setUserId(userId);
							userAccountMessage.setBalance(balance-price);
							userAccountMessage.setIntegration(price.intValue());
							
							userAccountService.updateBalanceMessage(userAccountMessage);
							UserAccountLog userAccountLog = new UserAccountLog();
							userAccountLog.setId(GenerateSequenceUtil.getUniqueId());
							userAccountLog.setBalance(balance-price);
							userAccountLog.setPrice(price);
							userAccountLog.setType(2);
							userAccountLog.setName("购买门票");
							userAccountLog.setIntegration(0);
							userAccountLog.setTradeIntegration(0);
							userAccountLog.setPayType(1);
							userAccountLog.setUserId(userId);
							userAccountLogService.insertMessage(userAccountLog);

							map.put("payWay", 1);
							visitorsOrderService.updatePaystate(map);
						} else {
							msg.setHearder(4, "余额不足");
						}
					} else if (payType == 2) {
						UserAccount userAccountMessage = new UserAccount();
						userAccountMessage.setUserId(userId);
						userAccountMessage.setBalance(balance);
						userAccountMessage.setIntegration(price.intValue());
						userAccountService.updateBalanceMessage(userAccountMessage);
						map.put("payWay", 2);
						visitorsOrderService.updatePaystate(map);

					} else if (payType == 3) {
						UserAccount userAccountMessage = new UserAccount();
						userAccountMessage.setUserId(userId);
						userAccountMessage.setBalance(balance);
						userAccountMessage.setIntegration(price.intValue());
						userAccountService.updateBalanceMessage(userAccountMessage);
						map.put("payWay", 3);
						visitorsOrderService.updatePaystate(map);
					}
					msg.setData(id);
					msg.setHearder(0, "success");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			msg.setHearder(1, "error");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * Title:景区 - 订单支付成功回显
	 * http://localhost/cfdScenic/visitorsOrder/payOrderFinsh?orderId=1
	 * @author:lishilong
	 * @date:2016年9月5日
	 */
	@RequestMapping(value = "/payOrderFinsh", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String payOrderFinsh(Long orderId) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map<String,Object> map = visitorsOrderService.findOrderByOrderId(orderId);
					if(map != null){
						msg.setData(map);
					}
					msg.setHearder(0,"ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			msg.setHearder(1, "error");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	

}
