package com.htkj.cfdScenic.app.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.PictureLibrary;
import com.htkj.cfdScenic.app.model.ShopUser;
import com.htkj.cfdScenic.app.model.UserComment;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.OrderDetailService;
import com.htkj.cfdScenic.app.service.ShopUserService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.page.DataGrid;
import com.htrj.common.page.PageCount;
import com.htrj.common.page.PagerForm;
import com.htrj.common.upload.UploadFile;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("/interFace/orderDetail")
public class OrderDetailController extends BaseController {
	@Autowired
	private OrderDetailService orderDetailService;
	@Autowired
	private ShopInformationService consumerUserService;
	@Autowired
	private ShopUserService shopUserService;
	/**
	 * 获取所有订单的的详情（酒店，饭店，商品）（未使用，已使用，已过期）
	 * http://localhost:8080/cfdScenic/interFace/orderDetail/findOrder?type=1&status=1&page=1&rows=3 
	 * 参数 type(1酒店，2特产，3饭店) status(1未使用，2已使用，3已过期)
	 * 流程：
	 * 1，判断状态status，给payState，orderState赋值的（数据库通过payState，orderState 来查询是哪种状态的）
	 * 2，通过类型来查询订单
	 * 调用表
	 * hotel_order goods_order restaurant_order shop_information
	 */
	@RequestMapping(value = "/findOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String findOrder(Integer type, Integer status,PageCount page) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					List<Map<String,Object>> orderList = new ArrayList<Map<String,Object>>();
					Map parameterMap = new HashMap();
					Map goodsMap = new HashMap();
					parameterMap.put("page",page.getPage());
					parameterMap.put("rows",page.getRows());
					goodsMap.put("page",page.getPage());
					goodsMap.put("rows",page.getRows());
					switch (status) {
					case 1: // 未使用
						parameterMap.put("userId", userId);
						parameterMap.put("payState","0,1");
						parameterMap.put("orderState","1,2,3,4");

						break;
					case 2: // 已使用
						parameterMap.put("userId", userId);
						parameterMap.put("payState", 1);
						parameterMap.put("orderState", 5);
						break;
					case 3: // 已过期
						parameterMap.put("userId", userId);
						parameterMap.put("payState", "0,1");
						parameterMap.put("orderState", 6);
						break;
					}
					switch (type) {
					case 1:// 酒店
						orderList = orderDetailService.findHotelOrder(parameterMap);
						break;
					case 2:// 特产
						switch (status) {
						case 1: // 代付款
							goodsMap.put("userId", userId);
							goodsMap.put("payState","0,1");
							goodsMap.put("orderState","1,2,4,6");

							break;
						case 2: // 已付款
							goodsMap.put("userId", userId);
							goodsMap.put("payState", 1);
							goodsMap.put("orderState", "3,7");
							break;
						case 3: // 已完成
							goodsMap.put("userId", userId);
							goodsMap.put("payState", "0,1");
							goodsMap.put("orderState","5");
							break;
						}
						orderList = orderDetailService.findGoodsOrder(goodsMap);
						break;
					case 3:// 饭店
						orderList = orderDetailService.findRestaurantOrder(parameterMap);
						break;
					}
						if(orderList.get(0) != null && orderList.size() >0){
							msg.setData(orderList);
							msg.setHearder(0, "ok");
						}else{
							msg.setHearder(4,"内容为空");
						}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	/**
	 * 查看订单的详细信息
	 * http://localhost:8080/cfdScenic/interFace/orderDetail/findOrderDetail?type=1&orderId=1 
	 * 参数 orderId(订单ID),type(订单类型（1酒店，2特产，3饭店）)
	 * 流程
	 * 1，通过type来查询订单
	 * 调用表
	 * shop_goods shop_information goods_order hotel_order restaurant_order
	 */
	@RequestMapping(value = "/findOrderDetail", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String findOrderDetail(Integer type,Long orderId) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map<String,Object> map = new HashMap<String,Object>();
					switch (type) {
					case 1:// 酒店
						map = orderDetailService.findHotelOrderDetail(orderId);
						break;
					case 2:// 特产
						map = orderDetailService.findGoodsOrderDetail(orderId);
						break;
					case 3:// 饭店
						map = orderDetailService.findRestaurantOrderDetail(orderId);
						break;
					}
					if (map != null) {
						msg.setData(map);
						msg.setHearder(0, "ok");
					} else {
						msg.setHearder(4, "dont have order");
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 申请退款   确认完成 
	 * http://localhost:8080/cfdScenic/interFace/orderDetail/backMoney?type=1&orderState=7&id=1
	 * type 订单类型  orderState 订单状态  id 订单Id
	 * 流程
	 * 修改订单状态
	 * 调用表
	 * hotel_order goods_order restaurant_order
	 */
	@RequestMapping(value = "/backMoney", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String backMoney(Integer type,Integer orderState,Long id){
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = new HashMap();
					map.put("orderState",orderState);
					map.put("id",id);
					switch (type) {
					case 1:// 酒店
						orderDetailService.hotelBackMoney(map);
						break;
					case 2:// 特产
						orderDetailService.goodsBackMoney(map);
						break;
					case 3:// 饭店
						orderDetailService.restaurantBackMoney(map);
						break;
					}
						msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	/**
	 *  评论
	 *  http://localhost:8080/cfdScenic/interFace/orderDetail/saveUserComment?linkId=1&content=好好吃&satisfyState=3&haveImg=0&memo=备注&isTravels=0
	 *  参数 
	 *  传参：linkId content satisfyState haveImg memo isTravels
	 *  默认：id user_id comment_type create_time
	 */
	@RequestMapping(value = "/saveUserComment", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String saveUserComment(UserComment userComment){
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Long id = GenerateSequenceUtil.getUniqueId();
					userComment.setId(id);
					userComment.setUserId(userId);
					userComment.setCommentType(2);
					userComment.setCreateTime(sdf.format(new Date()));
					orderDetailService.saveUserComment(userComment);
					msg.setData(id);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 *  评论	-- 上传图片
	 *  http://localhost:8080/cfdScenic/interFace/orderDetail/saveUserComment?name&picDescribe&linkId&type&memo
	 *  参数 
	 *  传参：linkId content satisfyState haveImg memo isTravels
	 *  默认：id user_id comment_type create_time
	 */
	@RequestMapping(value = "/uploadPic", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String uploadPic(@RequestParam("file") MultipartFile[] imageFiles,HttpServletRequest request,HttpServletResponse response,PictureLibrary pictureLibrary){
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					UploadFile uploadFile=new UploadFile();
					List<Map<String, String>> uploadImage = uploadFile.uploadImage(imageFiles,userId+"",request,response);
					for(Map<String, String> img : uploadImage){
						String contextUrl = img.get("contextUrl");
						pictureLibrary.setCreateTime(sdf.format(new Date()));
						pictureLibrary.setId(GenerateSequenceUtil.getUniqueId());
						pictureLibrary.setImgRootUrl(contextUrl);
						pictureLibrary.setImgUrl(contextUrl);
						orderDetailService.saveCommentPic(pictureLibrary);
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	/*
	 * 商品版--订单中心--订单列表
	 * post
	 * http://localhost:8080/cfdScenic/interFace/orderDetail/shopOrderList
	 *
	 * 请求参数

		status			//状态(1代发货2已使用)
	 */
	@RequestMapping(value="shopOrderList",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String orderList(Integer status,PageCount page){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		if(token!=null){
			if(userId!=null){
				
				ShopUser user=	shopUserService.selectByUserId(userId);
				Long shopInformationId=user.getShopInformationId();
				map.put("sfId", shopInformationId);
				map.put("page", page.getPage());
				map.put("rows", page.getRows());
				
				switch (status) {
				case 1:
					map.put("status","3,11");
					break;
				case 2:
					map.put("status","5");
					break;
				case 3:
					map.put("status","6");
					break;
				}
				try {
					//获取订单列表
					List<Map<String,Object>> orderList = orderDetailService.findShopGoodsOrder(map);
					msg.setHearder(0, "success");
					if(orderList.size()>0&&orderList.get(0)!=null)
					{
						msg.setData(orderList);
					}
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	/*
	 * 商品版--订单中心--订单列表
	 * post
	 * http://localhost:8080/cfdScenic/interFace/orderDetail/shopOrderChange
	 *
	 * 请求参数

		status			//状态(1确认发货2确认完成)
	 */
	@RequestMapping(value="shopOrderChange",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String shopOrderChange(Integer status,String orderCode){
		String token = webContext.getRequest().getHeader("Authorization");
		Long userId = shopUserService.getShopUserIdByToken(token);
		Map<String,Object> map=new HashMap<String,Object>();
		ResponseMsg msg = new ResponseMsg();
		if(token!=null){
			if(userId!=null){
				map.put("orderCode", orderCode);
				switch (status) {
				case 1:
					map.put("status","11");
					break;
				case 2:
					map.put("status","5");
					break;
				}
				
				try {
					//获取订单列表
					 orderDetailService.shopOrderChange(map);
					msg.setHearder(0, "success");
					
				} catch (Exception e) {
					e.printStackTrace();
					msg.setHearder(1, "error");
				}
			}else{
				msg.setHearder(3, "异地登入!");
			}
		}else{
			msg.setHearder(2, "认证失败,请重新登入!");
		}
		String json = JSONObject.toJSONString(msg,SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	
	
	
	
	
	
	
	
	
	
}
