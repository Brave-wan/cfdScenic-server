package com.htkj.cfdScenic.app.controller;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.UserAccountLog;
import com.htkj.cfdScenic.app.model.UserBank;
import com.htkj.cfdScenic.app.model.VisitorsOrder;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.MyPurseService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("interFace/MyPurse")
public class MyPurseController extends BaseController{

	@Autowired
	private ShopInformationService consumerUserService;
	@Autowired
	private MyPurseService myPurseService;
	
	/**
	 * 我的钱包 - 余额
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/myBalance?type=0
	 * 参数  type 类型（0余额交易1积分交易2结算交易3,商户给用户充值4,充值余额）
	 * 流程
	 * 1，通过userid获取余额
	 * 2，通过userid获取交易记录明细
	 * 调用表
	 * user_account
	 * user_account_log
	 */
	@RequestMapping(value = "/myBalance", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String myPurseDetail(Integer type) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				Map balanceMap = new HashMap();
				List tradeLogList = new ArrayList();
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = new HashMap();
					map.put("type",type);
					map.put("userId",userId);
					balanceMap = myPurseService.getMyBalance(userId);
					tradeLogList = myPurseService.getTradeLog(map);
					Map returnMap = new HashMap();
					returnMap.put("balanceMap",balanceMap);
					returnMap.put("tradeLogList",tradeLogList);
					msg.setData(returnMap);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 充值
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/recharge?passWord=123456&balance=20&name=测试订单
	 * 参数：
	 * passWork（用户输入密码） balance（充值金额）
	 * 流程
	 * 1，查询出用户的支付密码
	 * 2，判断支付密码，正确，插入一条交易记录，更近用户的余额，错误，返回状态码
	 * 
	 * 
	 */
	@RequestMapping(value = "/recharge", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String recharge(String passWord,BigDecimal balance,String name) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					String payPassWord = myPurseService.getPayPassWord(userId);
					Map balanceMap = myPurseService.getMyBalance(userId);
					if(payPassWord.equals(passWord)){
						//插入交易记录
						UserAccountLog userAccountLog = new UserAccountLog();
						userAccountLog.setId(GenerateSequenceUtil.getUniqueId());
						userAccountLog.setPrice(balance);
						userAccountLog.setBalance(balance.add((BigDecimal)balanceMap.get("balance")));
						userAccountLog.setCreateTime(sdf.format(new Date()));
						userAccountLog.setName(name);
						userAccountLog.setType(0);
						userAccountLog.setTradeIntegration(0);
						userAccountLog.setIntegration(0);
						userAccountLog.setUserId(userId);
						userAccountLog.setShopId(0L);
						userAccountLog.setPayType(0);
						myPurseService.saveUserAccountLog(userAccountLog);
						//更新余额
						Map map = new HashMap();
						map.put("balance",balance);
						map.put("userId",userId);
						int type = 1;
						myPurseService.updateBalanceUserAccount(map,type);
						msg.setHearder(0,"ok");
					}else{
						msg.setHearder(4,"password is different");
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 提现 - 回显(银行卡，余额)
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/withdraw
	 * 流程
	 * 1，提现之前先回显数据 (银行卡  ，余额)
	 */
	@RequestMapping(value = "/withdraw", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String withdraw() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					List bankList = myPurseService.getBank(userId);
					Map myBalance = myPurseService.getMyBalance(userId);
					Map map = new HashMap();
					map.put("bank", bankList);
					map.put("balance", myBalance);
					msg.setData(map);
					msg.setHearder(0,"ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 提现 - 密码判断
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/isPassWord?passWord=123456&balance=30&name=提现到中国建设银行
	 * 流程
	 * 1，先判断密码，成功之后就插入一条提现记录
	 * 2，更新自己账户的余额
	 * 调用表
	 */
	@RequestMapping(value = "/isPassWord", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String isPassWord(String passWord,BigDecimal balance,String name) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					String payPassWord = myPurseService.getPayPassWord(userId);
					Map balanceMap = myPurseService.getMyBalance(userId);
					if(payPassWord.equals(passWord)){
						//插入交易记录
						UserAccountLog userAccountLog = new UserAccountLog();
						userAccountLog.setId(GenerateSequenceUtil.getUniqueId());
						userAccountLog.setPrice(balance);
						userAccountLog.setBalance(((BigDecimal)balanceMap.get("balance")).subtract(balance));
						userAccountLog.setCreateTime(sdf.format(new Date()));
						userAccountLog.setName(name);
						userAccountLog.setType(0);
						userAccountLog.setTradeIntegration(0);
						userAccountLog.setIntegration(0);
						userAccountLog.setUserId(userId);
						userAccountLog.setShopId(0L);
						userAccountLog.setPayType(0);
						myPurseService.saveUserAccountLog(userAccountLog);
						//更新余额  减操作
						Map map = new HashMap();
						map.put("balance",balance);
						map.put("userId",userId);
						map.put("integration",Integer.parseInt(balance+""));
						int type = 1;
						myPurseService.updateBalanceUserAccount(map,type);
						msg.setHearder(0,"ok");
					}else{
						msg.setHearder(4,"passWord is error");
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 获取银行卡
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/getBank
	 * 流程：
	 * 查询银行卡列表
	 * 调用表
	 * user_bank
	 */
	@RequestMapping(value = "/getBank", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String getBank() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				List bankList = new ArrayList();
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					bankList = myPurseService.getBank(userId);
					msg.setData(bankList);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 添加银行卡
	 * 参数 bankname bankcode bankaccount realname idcard type
	 * 	id userId state
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/saveBank?bankname=交通银行&bankcode=123049586746&bankaccount=中国天山大街交通银行&realname=张全全&idcard=1230598678567238x&type=0
	 * 流程
	 * 插入一条银行卡
	 * 调用表user_bank
	 */
	@RequestMapping(value = "/saveBank", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String saveBank(UserBank userBank) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					userBank.setId(GenerateSequenceUtil.getUniqueId());
					userBank.setState(0);
					userBank.setUserId(userId);
					myPurseService.saveBank(userBank);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 判断有没有支付密码
	 * 点击支付密码调用此方法
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/payPassWord
	 * 流程
	 * 1，获取支付密码
	 * 2，判断支付密码是否为空
	 * 调用表
	 * 
	 */
	@RequestMapping(value = "/payPassWord", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String payPassWord() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					String passWord = myPurseService.getPayPassWord(userId);
					if(passWord != null && passWord.length() >0 && !passWord.equals("null")){
						msg.setHearder(0, "ok");
					}else{
						msg.setHearder(4, "dont hava passWord");
						json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
						System.out.println(json);
						return json;
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 更新支付密码
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/updatePayPassWord?passWord=123456
	 * 流程
	 * 更新用户表的密码
	 */
	@RequestMapping(value = "/updatePayPassWord", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String updatePayPassWord(String passWord) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = new HashMap();
					map.put("id",userId);
					map.put("passWord", passWord);
					myPurseService.updatePayPassWord(map);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 身份验证
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/updatePayPassWord?passWord=123456
	 * 通过 身份证号 和 卡号查询 有没有银行卡，如果有就可以重置密码
	 * 调用表
	 */
	@RequestMapping(value = "/authentication", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String authentication(String idCard,String cardNumber) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map parameterMap = new HashMap();
					Map map = new HashMap();
					parameterMap.put("idCard", idCard);
					parameterMap.put("cardNumber",cardNumber);
					map = myPurseService.getBankByIdCardAndCardNumber(parameterMap);
					if(map != null){
						msg.setHearder(0, "ok");
					}else{
						msg.setHearder(4, "validation fails");
					}
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 积分
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/myIntegral?type=1
	 * type 类型（0余额交易1积分交易2结算交易3,商户给用户充值）
	 * 流程
	 * 1，通过userid获取积分
	 * 2，通过userid获取交易记录明细
	 * 调用表
	 * user_account
	 * user_account_log
	 */
	@RequestMapping(value = "/myIntegral", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String myIntegral(Integer type) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				Map integralMap = new HashMap();
				List tradeLogList = new ArrayList();
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = new HashMap();
					map.put("type",type);
					map.put("userId",userId);
					integralMap = myPurseService.getMyIntegral(userId);
					tradeLogList = myPurseService.getTradeLog(map);
					Map returnMap = new HashMap();
					returnMap.put("integralMap",integralMap);
					returnMap.put("tradeLogList",tradeLogList);
					msg.setData(returnMap);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 积分 - 去兑换 - 商品列表
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/integralShopGoods
	 */
	@RequestMapping(value = "/integralShopGoods", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String integralShopGoods() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				Map integralMap = new HashMap();
				List tradeLogList = new ArrayList();
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					List goodsList = new ArrayList();
					goodsList = myPurseService.getIntegralGoods();
					msg.setData(goodsList);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 积分 - 商品详情
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/integralGoodsDetail?id=1
	 */
	@RequestMapping(value = "/integralGoodsDetail", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String integralGoodsDetail(Long id) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				Map integralMap = new HashMap();
				List tradeLogList = new ArrayList();
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map goodsDetail = new HashMap();
					goodsDetail = myPurseService.getIntegralGoodsDetaili(id);
					msg.setData(goodsDetail);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 积分 - 确认订单(保存订单)
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/saveIntegralOrder?name=积分订单&orderDescribe=积分订单描述&startValid=2016-08-09&endValid=2016-09-08&quantity=1&payWay=4&visitorsId=2&type=1&integraPrice=60&addressId=1&price=10
	 * 参数	说明 price是运费
	 * 传参
	 * name orderDescribe startValid endValid quantity payWay visitorsId type integraPrice				
	 * 默认
	 * id payState orderState price createTime (payTime refundTime) realPrice userId orderCode isComment
	 */
	@RequestMapping(value = "/saveIntegralOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String saveIntegralOrder(VisitorsOrder visitorsOrder) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					visitorsOrder.setId(GenerateSequenceUtil.getUniqueId());
					visitorsOrder.setPayState(0);
					visitorsOrder.setOrderState(1);
					visitorsOrder.setCreateTime(sdf.format(new Date()));
					visitorsOrder.setRealPrice(visitorsOrder.getPrice());
					visitorsOrder.setUserId(userId);
					visitorsOrder.setOrderCode(GenerateSequenceUtil.getUniqueId()+"");
					visitorsOrder.setIsComment(0);
					myPurseService.saveIntegralOrder(visitorsOrder);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 *  我的钱包 - 积分 - 提交订单回显
	 *  http://localhost:8080/cfdScenic/interFace/MyPurse/selectVisitorsOrder?id=1608080455348060
	 *  流程
	 *  1，通过id查询订单
	 *  调用表
	 */
	@RequestMapping(value = "/selectVisitorsOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String selectVisitorsOrder(Long id) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map map = myPurseService.selectVisitorsOrder(id);
					msg.setData(map);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 *  我的钱包 - 积分 - 订单列表
	 *  http://localhost:8080/cfdScenic/interFace/MyPurse/selectMyAllVisitorsOrder
	 */
	@RequestMapping(value = "/selectMyAllVisitorsOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String selectMyAllVisitorsOrder() {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					List map = myPurseService.selectMyAllVisitorsOrder(userId);
					msg.setData(map);
					msg.setHearder(0, "ok");
				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
	/**
	 * 我的钱包 - 积分 - 订单详情
	 * http://localhost:8080/cfdScenic/interFace/MyPurse/selectVisitorsOrderDetail?id=1608080506518250
	 */
	@RequestMapping(value = "/selectVisitorsOrderDetail", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String selectVisitorsOrderDetail(Long id) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
//			String token = webContext.getRequest().getHeader("Authorization");
//			if (token != null) {
//				Long userId = consumerUserService.getUserIdByToken(token);
//				if (userId == null) {
//					msg.setHearder(3, "认证信息错误，请重新登录！");
//				} else {
					Map map = myPurseService.selectVisitorsOrderDetail(id);
					msg.setData(map);
					msg.setHearder(0, "ok");
//				}
//			} else {
//				msg.setHearder(2, "token is null");
//			}
		} catch (Exception e) {
			e.printStackTrace();
			msg.setHearder(1, "ckeck error");
		}
		json = JSONObject.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}
}
