package com.htkj.cfdScenic.app.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.htkj.cfdScenic.app.model.UserAccount;
import com.htkj.cfdScenic.app.model.UserAccountLog;
import com.htkj.cfdScenic.app.model.VisitorsOrder;
import com.htkj.cfdScenic.app.service.ShopInformationService;
import com.htkj.cfdScenic.app.service.UserAccountLogService;
import com.htkj.cfdScenic.app.service.UserAccountService;
import com.htkj.cfdScenic.app.service.VisitorsOrderService;
import com.htkj.cfdScenic.app.util.ResponseMsg;
import com.htrj.common.base.BaseController;
import com.htrj.common.utils.GenerateSequenceUtil;

@Controller
@RequestMapping("/visitorsOrder")
public class VisitorsOrderController extends BaseController {
	@Autowired
	private VisitorsOrderService visitorsOrderService;
	@Autowired
	private ShopInformationService consumerUserService;
	@Autowired
	private UserAccountService userAccountService;
	@Autowired
	private UserAccountLogService userAccountLogService;

	/*
	 * 景区-确认订单 POST http://localhost:8080/cfdScenic/VisitorsOrder/affirmOrder
	 * 把景区传过来的值存进表 name //订单名称 orderDescribe //订单描述 price //原价 startValid
	 * //开始有效期 endValid //结束有效期 quantity //数量 userId //用户id realPrice //应付价格
	 * visitorsId //景点id
	 */
	@RequestMapping(value = "/affirmOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String affirmOrder(VisitorsOrder visitorsOrder) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {
			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Long temCode = GenerateSequenceUtil.getUniqueId();
					Integer quantity=visitorsOrder.getQuantity();
					if (quantity > 0) {
						for (int i = 0; i < quantity; i++) {
							visitorsOrder.setId(GenerateSequenceUtil
									.getUniqueId());
							visitorsOrder.setPayState(0);
							visitorsOrder.setOrderState(1);
							visitorsOrder.setQuantity(quantity);
							visitorsOrder.setUserId(userId);
							visitorsOrder.setOrderCode(temCode.toString());
							visitorsOrder.setIsComment(0);
							visitorsOrder.setType(0);
							visitorsOrderService.insertMessage(visitorsOrder);
						}
						UserAccount userAccount=userAccountService.findByUserId(userId);
						Map<String, Object> map = new HashMap<String, Object>();
						map.put("orderCode", temCode);
						if(userAccount!=null)
						{
							map.put("balance",userAccount.getBalance());
						}else
						{
							map.put("balance",0);
						}
						msg.setHearder(0, "success");
						msg.setData(map);
					}

				}
			} else {
				msg.setHearder(2, "token is null");
			}

		} catch (Exception e) {
			msg.setHearder(1, "error");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}

	/*
	 * 景区-支付订单 POST http://localhost:8080/cfdScenic/VisitorsOrder/payOrder
	 * 把景区传过来的值存进表
	 * 
	 * visitorsId //景点订单号 payType //支付方式（0余额1支付宝2微信） balance //余额 price //价格
	 */
	@RequestMapping(value = "/payOrder", produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String payOrder(Long orderCode, Integer payType, BigDecimal balance,
			BigDecimal price) {
		ResponseMsg msg = new ResponseMsg();
		String json = new String();
		try {

			String token = webContext.getRequest().getHeader("Authorization");
			if (token != null) {
				Long userId = consumerUserService.getUserIdByToken(token);
				if (userId == null) {
					msg.setHearder(3, "认证信息错误，请重新登录！");
				} else {
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("orderCode", orderCode);
					if (payType == 0) {
						if (balance.compareTo(price) == 1) {
							UserAccount userAccountMessage = new UserAccount();
							userAccountMessage.setUserId(userId);
							userAccountMessage.setBalance(balance
									.subtract(price));
							userAccountService
									.updateBalanceMessage(userAccountMessage);
							UserAccountLog userAccountLog = new UserAccountLog();
							userAccountLog.setId(GenerateSequenceUtil
									.getUniqueId());
							userAccountLog.setBalance(balance.subtract(price));
							userAccountLog.setPrice(price);
							userAccountLog.setType(2);
							userAccountLog.setName("购买门票");
							userAccountLog.setIntegration(0);
							userAccountLog.setTradeIntegration(0);
							userAccountLog.setPayType(1);
							userAccountLog.setUserId(userId);
							userAccountLogService.insertMessage(userAccountLog);

							map.put("payWay", 1);
							visitorsOrderService.updatePaystate(map);
						} else {
							msg.setHearder(4, "余额不足");
						}
					} else if (payType == 1) {
						map.put("payWay", 2);
						visitorsOrderService.updatePaystate(map);

					} else if (payType == 1) {
						map.put("payWay", 3);
						visitorsOrderService.updatePaystate(map);
					}
					msg.setHearder(0, "success");

				}
			} else {
				msg.setHearder(2, "token is null");
			}
		} catch (Exception e) {
			msg.setHearder(1, "error");
		}
		json = JSONObject
				.toJSONString(msg, SerializerFeature.WriteMapNullValue);
		System.out.println(json);
		return json;
	}

}
